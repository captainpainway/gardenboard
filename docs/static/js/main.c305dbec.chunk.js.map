{"version":3,"sources":["components/Tile.js","components/Tiles.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","Tile","data","useState","expanded","setExpanded","classes","url","photo","storeLinks","links","map","s","i","IconButton","key","href","Card","elevation","className","CardMedia","component","image","height","title","name","CardContent","style","paddingBottom","Typography","variant","CardActions","onClick","aria-expanded","aria-label","clsx","Collapse","in","timeout","unmountOnExit","textAlign","paragraph","fontWeight","location","seasons","join","type","categories","Tiles","filters","tileData","filter","d","category","season","color","includes","colors","id","breakpointCols","default","1400","1200","1000","800","600","columnClassName","formControl","margin","spacing","minWidth","palette","primary","dark","inputLabel","SearchBar","setFilters","setType","setCategory","setSeason","setColor","types","Set","sort","t","MenuItem","value","flatMap","c","textTransform","useEffect","reset","AppBar","FormControl","InputLabel","Select","labelId","onChange","e","target","Button","disableElevation","createMuiTheme","light","main","contrastText","secondary","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c305dbec.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport '../App.css';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport StorefrontIcon from '@material-ui/icons/Storefront';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles((theme) => ({\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto !important',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    }\n}));\n\nexport const Tile = ({data}) => {\n    const [expanded, setExpanded] = useState(false);\n    const classes = useStyles();\n\n    let url = `./images/${data.photo}`;\n    let storeLinks = data.links.map((s, i) => {\n        return <IconButton key={i} href={s}><StorefrontIcon/></IconButton>;\n    });\n\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n    };\n\n    return (\n    <Card elevation={5} className=\"tile\">\n        <CardMedia component=\"img\" image={url} height=\"auto\" title={data.name} />\n        <CardContent style={{paddingBottom: 0}}>\n            <Typography variant=\"overline\">{data.name}</Typography>\n        </CardContent>\n        <CardActions>\n            {storeLinks}\n            <IconButton\n                onClick={handleExpandClick}\n                aria-expanded={expanded}\n                aria-label=\"show more\"\n                className={clsx(classes.expand, {\n                    [classes.expandOpen]: expanded,\n                })}\n            >\n                <ExpandMoreIcon/>\n            </IconButton>\n        </CardActions>\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n            <CardContent style={{textAlign: \"left\"}}>\n                <Typography variant=\"body2\" paragraph><span style={{fontWeight: \"bold\"}}>Ideal location:</span> {data.location}</Typography>\n                <Typography variant=\"body2\" paragraph><span style={{fontWeight: \"bold\"}}>Seasons:</span> {data.seasons.join(\", \")}</Typography>\n                <Typography variant=\"body2\" paragraph><span style={{fontWeight: \"bold\"}}>Type:</span> {data.type}</Typography>\n                <Typography variant=\"body2\" paragraph><span style={{fontWeight: \"bold\"}}>Categories:</span> {data.categories.join(\", \")}</Typography>\n            </CardContent>\n        </Collapse>\n    </Card>\n  );\n};\n","import React from 'react';\nimport '../App.css';\nimport {Tile} from \"./Tile\";\nimport Masonry from 'react-masonry-css';\n\nexport const Tiles = ({filters, data}) => {\n    let tileData = data.filter(d => {\n        if (filters.type !== '' || filters.category !== '' || filters.season !== '' || filters.color !== '') {\n            return d.type === filters.type ||\n                d.categories.includes(filters.category) ||\n                d.seasons.includes(filters.season) ||\n                d.colors.includes(filters.color);\n        }\n        return d;\n    }).map(d => {\n        return <Tile key={d.name} data={d}/>\n    });\n\n    return (\n        <Masonry id=\"tiles\" breakpointCols={{default: 6, 1400: 5, 1200: 4, 1000: 3, 800: 2, 600: 1}} className=\"my-masonry-grid\" columnClassName=\"my-masonry-grid_column\">\n            {tileData}\n        </Masonry>\n    );\n};\n","import React, {useState, useEffect} from 'react';\nimport '../App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport ToolBar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 180,\n        '& .MuiFormLabel-root.Mui-focused': {color: theme.palette.primary.dark}\n    },\n    inputLabel: {\n    }\n}));\n\nexport const SearchBar = ({setFilters, data}) => {\n    const classes = useStyles();\n    const [type, setType] = useState('');\n    const [category, setCategory] = useState('');\n    const [season, setSeason] = useState('');\n    const [color, setColor] = useState('');\n\n    const types = [...new Set(data.map((d) => d.type))].sort().map((t) => {\n        return <MenuItem value={t} key={t}>{t}</MenuItem>\n    });\n\n    const categories = [...new Set(data.flatMap((d) => d.categories))].sort().map((c) => {\n        return <MenuItem value={c} key={c}>{c}</MenuItem>\n    });\n\n    const seasons = [...new Set(data.flatMap((d) => d.seasons))].sort().map((c) => {\n        return <MenuItem value={c} key={c}>{c}</MenuItem>\n    });\n\n    const colors = [...new Set(data.flatMap((d) => d.colors))].sort().map((c) => {\n        return <MenuItem value={c} key={c} style={{textTransform: \"capitalize\"}}>{c}</MenuItem>\n    });\n\n    useEffect(() => {\n        setFilters({\n            type: type,\n            category: category,\n            season: season,\n            color: color\n        });\n    }, [type, category, season, color]);\n\n    const reset = () => {\n        setType('');\n        setCategory('');\n        setSeason('');\n        setColor('');\n    };\n\n  return (\n    <AppBar id=\"searchBar\">\n      <ToolBar>\n          <Typography variant=\"h4\" className=\"gardenboard\">\n              Gardenboard\n          </Typography>\n          <FormControl className={classes.formControl}>\n              <InputLabel id=\"label-select-color\">Color</InputLabel>\n              <Select labelId=\"label-select-color\" id=\"select-color\" value={color} onChange={e => {reset(); setColor(e.target.value)}} style={{textTransform: \"capitalize\"}}>\n                  {colors}\n              </Select>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n              <InputLabel id=\"label-select-type\">Type</InputLabel>\n              <Select labelId=\"label-select-type\" id=\"select-type\" value={type} onChange={e => {reset(); setType(e.target.value)}}>\n                  {types}\n              </Select>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n              <InputLabel id=\"label-select-category\">Category</InputLabel>\n              <Select labelId=\"label-select-category\" id=\"select-category\" value={category} onChange={e => {reset(); setCategory(e.target.value)}}>\n                  {categories}\n              </Select>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n              <InputLabel id=\"label-select-season\">Season</InputLabel>\n              <Select labelId=\"label-select-season\" id=\"select-season\" value={season} onChange={e => {reset(); setSeason(e.target.value)}}>\n                  {seasons}\n              </Select>\n          </FormControl>\n          <FormControl>\n              <Button variant=\"contained\" color=\"secondary\" disableElevation onClick={reset}>Reset</Button>\n          </FormControl>\n      </ToolBar>\n    </AppBar>\n  );\n};\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Tiles} from \"./components/Tiles\";\nimport {SearchBar} from \"./components/SearchBar\";\nimport {unstable_createMuiStrictModeTheme as createMuiTheme} from \"@material-ui/core\";\nimport {MuiThemeProvider} from \"@material-ui/core\";\nimport data from './data/images.json';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: '#d0e7b7',\n            main: '#c5e1a5',\n            dark: '#899d73',\n            contrastText: '#333333'\n        },\n        secondary: {\n            light: '#e3f0d3',\n            main: '#dcedc8',\n            dark: '#9aa58c',\n            contrastText: '#333333'\n        },\n    },\n});\n\nconst App = () => {\n    const [filters, setFilters] = useState('');\n\n  return (\n      <MuiThemeProvider theme={theme}>\n          <div className=\"App\">\n              <SearchBar setFilters={setFilters} data={data}/>\n              <Tiles filters={filters} data={data}/>\n          </div>\n      </MuiThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}